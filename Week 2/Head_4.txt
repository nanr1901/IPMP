//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	vector<char>res;
	    struct minheap
	    {
	        char data;
	        int freq;
	        minheap*left,*right;
	        minheap(char data,int freq)
	        {
	            left=right=NULL;
	            this->data=data;
	            this->freq=freq;
	        }
	    };
	    struct compare{
	        bool operator()(minheap* l,minheap* r)
	        {return (l->freq > r->freq);}
	    };
	    
	    void print(struct minheap*root,string str)
	    {
	        if (!root)return;
	        if (root->data!='$')
	        res.push_back(root->data);
	        print(root->left,str+"0");
	        print(root->right,str+"1");
	    }
		vector<string> huffmanCodes(string s,vector<int> f,int size)
		{
		    struct minheap*left,*right,*top;
		    
		    priority_queue<minheap*,vector<minheap*>,compare>minh;
		    for (int i=0;i<size;i++)
		    minh.push(new minheap(s[i],f[i]));
		    while (minh.size()!=1)
		    {
		        left=minh.top();
		        minh.pop();
		        right=minh.top();
		        minh.pop();
		        top=new minheap('$',left->freq+right->freq);
		        top->left=left;
		        top->right=right;
		        minh.push(top);
		    }
		    print(minh.top(),"");
		}
};

//{ Driver Code Starts.
int main(){
    int T;
    cin >> T;
    while(T--)
    {
	    string S;
	    cin >> S;
	    int N = S.length();
	    vector<int> f(N);
	    for(int i=0;i<N;i++){
	        cin>>f[i];
	    }
	    Solution ob;
	    vector<string> ans = ob.huffmanCodes(S,f,N);
	    for(auto i: ans)
	    	cout << i << " ";
	    cout << "\n";
    }
	return 0;
}
// } Driver Code Ends